/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MockAggregatorInterface extends Interface {
  functions: {
    latestAnswer: TypedFunctionDescription<{ encode([]: []): string }>;

    setAnswer: TypedFunctionDescription<{
      encode([a]: [BigNumberish]): string;
    }>;
  };

  events: {};
}

export class MockAggregator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MockAggregator;
  attach(addressOrName: string): MockAggregator;
  deployed(): Promise<MockAggregator>;

  on(event: EventFilter | string, listener: Listener): MockAggregator;
  once(event: EventFilter | string, listener: Listener): MockAggregator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MockAggregator;
  removeAllListeners(eventName: EventFilter | string): MockAggregator;
  removeListener(eventName: any, listener: Listener): MockAggregator;

  interface: MockAggregatorInterface;

  functions: {
    latestAnswer(): Promise<BigNumber>;

    setAnswer(
      a: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  latestAnswer(): Promise<BigNumber>;

  setAnswer(
    a: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    latestAnswer(): Promise<BigNumber>;

    setAnswer(a: BigNumberish): Promise<BigNumber>;
  };
}
